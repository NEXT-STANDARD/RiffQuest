/**
 * Simplified Electron Main Process
 * CommonJS-based for compatibility
 */

const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const OBSWebSocket = require('obs-websocket-js');

let mainWindow: any = null;
let obs = new OBSWebSocket.default();
let obsConnected = false;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, '../preload/preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
    title: 'RiffQuest',
  });

  // 開発環境ではViteサーバーをロード
  if (!app.isPackaged) {
    mainWindow.loadURL('http://localhost:5173');
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));
  }
}

// OBS イベントリスナー
obs.on('CurrentProgramSceneChanged', (data: any) => {
  console.log('[OBS] シーン変更:', data.sceneName);
  if (mainWindow) {
    mainWindow.webContents.send('obs:scene-changed', data.sceneName);
  }
});

obs.on('ConnectionClosed', () => {
  console.log('[OBS] 接続が閉じられました');
  obsConnected = false;
  if (mainWindow) {
    mainWindow.webContents.send('obs:disconnected');
  }
});

// IPC ハンドラー
function setupIPC() {
  ipcMain.handle('app:get-version', () => {
    return app.getVersion();
  });

  ipcMain.handle('obs:connect', async (_: any, url: string, password?: string) => {
    try {
      await obs.connect(url, password);
      obsConnected = true;
      console.log('[OBS] 接続成功:', url);
      if (mainWindow) {
        mainWindow.webContents.send('obs:connected', { url });
      }
      return { success: true };
    } catch (error: any) {
      console.error('[OBS] 接続失敗:', error);
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('obs:disconnect', async () => {
    try {
      await obs.disconnect();
      obsConnected = false;
      console.log('[OBS] 切断しました');
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('obs:get-current-scene', async () => {
    try {
      if (!obsConnected) {
        throw new Error('OBSに接続していません');
      }
      const response = await obs.call('GetCurrentProgramScene');
      return { success: true, sceneName: response.currentProgramSceneName || '' };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  });
}

app.whenReady().then(() => {
  createWindow();
  setupIPC();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
