/**
 * OBS WebSocket Manager
 * OBS接続・イベント監視を管理
 */

import OBSWebSocket from 'obs-websocket-js';
import { BrowserWindow } from 'electron';

export class OBSManager {
  private obs: OBSWebSocket;
  private mainWindow: BrowserWindow | null = null;
  private connected = false;

  constructor() {
    this.obs = new OBSWebSocket();
    this.setupEventListeners();
  }

  /**
   * メインウィンドウを設定
   */
  setMainWindow(window: BrowserWindow) {
    this.mainWindow = window;
  }

  /**
   * OBSに接続
   */
  async connect(url: string, password?: string): Promise<void> {
    try {
      await this.obs.connect(url, password);
      this.connected = true;
      console.log('[OBS] 接続成功:', url);

      // レンダラープロセスに通知
      if (this.mainWindow) {
        this.mainWindow.webContents.send('obs:connected', { url });
      }
    } catch (error) {
      console.error('[OBS] 接続失敗:', error);
      this.connected = false;
      throw error;
    }
  }

  /**
   * OBSから切断
   */
  async disconnect(): Promise<void> {
    try {
      await this.obs.disconnect();
      this.connected = false;
      console.log('[OBS] 切断しました');

      if (this.mainWindow) {
        this.mainWindow.webContents.send('obs:disconnected');
      }
    } catch (error) {
      console.error('[OBS] 切断エラー:', error);
      throw error;
    }
  }

  /**
   * 現在のシーン名を取得
   */
  async getCurrentScene(): Promise<string> {
    if (!this.connected) {
      throw new Error('OBSに接続していません');
    }

    const response = await this.obs.call('GetCurrentProgramScene');
    return response.currentProgramSceneName || '';
  }

  /**
   * 接続状態を取得
   */
  isConnected(): boolean {
    return this.connected;
  }

  /**
   * イベントリスナーをセットアップ
   */
  private setupEventListeners() {
    // シーン変更イベント
    this.obs.on('CurrentProgramSceneChanged', (data) => {
      console.log('[OBS] シーン変更:', data.sceneName);

      if (this.mainWindow) {
        this.mainWindow.webContents.send('obs:scene-changed', data.sceneName);
      }
    });

    // 接続エラー
    this.obs.on('ConnectionError', (error) => {
      console.error('[OBS] 接続エラー:', error);
      this.connected = false;

      if (this.mainWindow) {
        this.mainWindow.webContents.send('obs:error', { message: error.message });
      }
    });

    // 接続クローズ
    this.obs.on('ConnectionClosed', () => {
      console.log('[OBS] 接続が閉じられました');
      this.connected = false;

      if (this.mainWindow) {
        this.mainWindow.webContents.send('obs:disconnected');
      }
    });
  }
}
