/**
 * RiffQuest Server
 * Express + Socket.io + OBS WebSocket統合
 */

import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import OBSWebSocket from 'obs-websocket-js';

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: 'http://localhost:5173',
    methods: ['GET', 'POST'],
  },
});

const obs = new OBSWebSocket();
let obsConnected = false;

// ミドルウェア
app.use(cors());
app.use(express.json());

// OBS WebSocketイベントリスナー
obs.on('CurrentProgramSceneChanged', (data) => {
  console.log('[OBS] シーン変更:', data.sceneName);
  io.emit('obs:scene-changed', data.sceneName);
});

obs.on('ConnectionClosed', () => {
  console.log('[OBS] 接続が閉じられました');
  obsConnected = false;
  io.emit('obs:disconnected');
});

obs.on('ConnectionError', (error) => {
  console.error('[OBS] 接続エラー:', error);
  obsConnected = false;
  io.emit('obs:error', { message: error.message });
});

// REST API
app.get('/api/health', (_req, res) => {
  res.json({
    status: 'ok',
    obs: obsConnected ? 'connected' : 'disconnected',
  });
});

app.post('/api/obs/connect', async (_req, res) => {
  const { url, password } = _req.body;

  try {
    await obs.connect(url, password);
    obsConnected = true;
    console.log('[OBS] 接続成功:', url);

    io.emit('obs:connected', { url });

    res.json({ success: true });
  } catch (error: any) {
    console.error('[OBS] 接続失敗:', error);
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

app.post('/api/obs/disconnect', async (_req, res) => {
  try {
    await obs.disconnect();
    obsConnected = false;
    console.log('[OBS] 切断しました');

    io.emit('obs:disconnected');

    res.json({ success: true });
  } catch (error: any) {
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

app.get('/api/obs/current-scene', async (_req, res) => {
  try {
    if (!obsConnected) {
      throw new Error('OBSに接続していません');
    }

    const response = await obs.call('GetCurrentProgramScene');
    res.json({
      success: true,
      sceneName: response.currentProgramSceneName || '',
    });
  } catch (error: any) {
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

// Socket.io接続処理
io.on('connection', (socket) => {
  console.log('[Socket.io] クライアント接続:', socket.id);

  // OBS接続状態を送信
  socket.emit('obs:status', { connected: obsConnected });

  socket.on('disconnect', () => {
    console.log('[Socket.io] クライアント切断:', socket.id);
  });
});

// サーバー起動
const PORT = process.env.PORT || 3030;
httpServer.listen(PORT, () => {
  console.log(`\n🚀 RiffQuest Server running on http://localhost:${PORT}`);
  console.log(`📡 Socket.io ready for connections`);
  console.log(`🎸 Ready to connect to OBS Studio\n`);
});
